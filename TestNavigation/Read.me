https://www.curiousalgorithm.com/post/router-pattern-for-swiftui-navigation

SwiftUI 탐색을 위한 라우터 패턴
SwiftUI의 탐색 API는 사용하기 쉽지만 절충안이 있습니다. 탐색 논리를 뷰와 결합합니다.


탐색 코드에서 뷰 코드를 분리하기 위해 적합한 디자인 패턴을 사용할 수 있습니다. UIKit 영역에서 우리가 사용할 수 있는 패턴 중 하나는 코디네이터 패턴입니다. 그러나 앱이 SwiftUI로만 구축된 경우 탐색에 대한 SwiftUI 접근 방식에 적합한 다른 솔루션이 필요합니다.


인기가 높아진 패턴 중 하나가 라우터 패턴입니다. 코디네이터 패턴과 유사하게, 이 패턴의 목표는 탐색 논리를 뷰에서 최대한 분리하여 앱 유지 관리 및 확장성을 향상시키는 것입니다.


이 기사에서는 라우터 패턴이 무엇인지, 그리고 이를 구현하는 방법을 살펴보겠습니다. 그렇게 하기 전에, 우리가 그것을 사용하는 이유를 이해하는 것이 도움이 될 수 있습니다.


탐색에 라우터 패턴을 사용하는 경우

SwiftUI에서 탐색 스택을 사용하여 뷰를 푸시하려면 다음과 같이 수행합니다.

struct ViewA: View {
    var body: some View {
        // 1
        NavigationStack {
            VStack {
                Text("This is ViewA")
                // 2
                NavigationLink("ViewB", value: 1)
            }
            // 2
            .navigationDestination(for: Int.self) { _ in
                // 3
                ViewB()
            }
        }
    }
}


나는 이것이 UIKit의 동등한 프로세스에 비해 훨씬 적은 코드를 포함한다는 것을 인정하지만 여전히 이 코드에는 몇 가지 문제가 있습니다.

ViewA는 말 그대로 ViewB를 포함하고 있기 때문에 NavigationStack을 사용하여 ViewB를 표시한다는 것을 알고 있습니다. 대신 시트를 사용하여 ViewB를 표시하려면 ViewA 를 여러 번 업데이트해야 합니다.

ViewB를 표시하는 방법을 아는 것 외에도 ViewA는 뷰와 연결된 값이 무엇인지 알아야 합니다. NavigationLink 및 NavigationDestination 뷰 수정자 에서 이를 확인할 수 있습니다 .

내 생각에 아마도 가장 큰 공격은 ViewA가 ViewB 구축을 담당하고 있다는 것입니다 !


이 모든 결과로 인해 두 개의 뷰가 서로 결합됩니다. 즉, ViewB 에 대한 모든 업데이트가 ViewA 에 영향을 미칠 가능성이 높다는 의미입니다 . 예를 들어, ViewB를 초기화하기 위해 새 데이터가 필요한 경우 이를 제공하려면 ViewA를 업데이트해야 합니다. 다른 경우, 더 이상 ViewA 에서 ViewB를 푸시하지 않으려면 ViewA를 크게 수정해야 합니다. 두 뷰 간의 결합으로 인해 ViewB 와 관련된 모든 업데이트가 ViewA 에 영향을 미치게 됩니다.


우리의 뷰 코드는 사용자에게 데이터를 표시하고 사용자 입력을 캡처하는 데에만 초점을 맞춰야 하며 이상적으로는 탐색 논리도 담당해서는 안 됩니다. 이는 단일 책임 원칙으로 알려져 있으며, 코드를 깔끔하고 유지 관리 및 확장 가능하게 만들고 싶다면 따라야 할 좋은 원칙입니다.


뷰에 단 하나의 책임만 있도록 하려면 탐색 논리를 다른 곳으로 옮겨야 합니다. 이를 수행하는 한 가지 방법은 라우터를 도입하는 것입니다.


SwiftUI 탐색에 라우터 패턴 사용

위에서 언급한 것처럼 우리의 목표는 모든 탐색 관련 코드를 뷰에서 라우터로 옮기는 것입니다. 다음 이미지는 라우터를 사용하는 방법을 보여줍니다.


Swiftui 뷰를 관리하는 라우터 객체가 포함된 Swiftui 라우터 뷰

라우터 보기는 SwiftUI 탐색 API를 배치하는 SwiftUI 보기입니다. 단순화를 위해 NavigationStack 만 사용하겠습니다 .

// View containing the necessary SwiftUI
// code to utilize a NavigationStack for
// navigation accross our views.
struct RouterView<Content: View>: View {
    @StateObject var router: Router = Router()
    // Our root view content
    private let content: Content
    
    init(@ViewBuilder content: @escaping () -> Content) {
        self.content = content()
    }
    
    var body: some View {
        NavigationStack(path: $router.path) {
            content
                .navigationDestination(for: Router.Route.self) { route in
                    router.view(for: route)
                }
        }
        .environmentObject(router)
    }
}

Router 개체는 라우터 보기에 포함된 보기를 작성하고, 보기 간의 탐색을 관리하고, 필요한 조건부 흐름 논리를 포함하는 일을 담당합니다.


class Router: ObservableObject {
    // Contains the possible destinations in our Router
    enum Route: Hashable {
        case viewA
        case viewB(String)
        case viewC
    }
    
    // Used to programatically control our navigation stack
    @Published var path: NavigationPath = NavigationPath()
    
    // Builds the views
    @ViewBuilder func view(for route: Route) -> some View {
        switch route {
        case .viewA:
            ViewA()
        case .viewB(let str):
            ViewB(description: str)
        case .viewC:
            ViewC()
        }
    }
    
    // Used by views to navigate to another view
    func navigateTo(_ appRoute: Route) {
        path.append(appRoute)
    }
    
    // Used to go back to the previous screen
    func navigateBack() {
        path.removeLast()
    }
    
    // Pop to the root screen in our hierarchy
    func popToRoot() {
        path.removeLast(path.count)
    }
}


우리의 뷰는 더 이상 서로에 대해 또는 뷰가 표시되는 방식을 알 필요가 없으며 라우터가 이를 처리합니다. 우리가 알아야 할 모든 뷰는 Router 개체를 사용하여 다른 화면으로 이동할 수 있다는 것입니다.

struct ViewA: View {
    @EnvironmentObject var router: Router
    
    var body: some View {
        VStack() {
            Button("Go to View B") {
                router.navigateTo(.viewB("Got here from A"))
            }
            Button("Go to View C") {
                router.navigateTo(.viewC)
            }
        }
        .navigationTitle("View A")
    }
}

struct ViewB: View {
    @EnvironmentObject var router: Router
    let description: String
    
    var body: some View {
        VStack() {
            Text(description)
            Button("Go to View A") {
                router.navigateTo(.viewA)
            }
            Button("Go to View C") {
                router.navigateTo(.viewC)
            }
        }
        .navigationTitle("View B")
    }
}

struct ViewC: View {
    @EnvironmentObject var router: Router
    
    var body: some View {
        VStack() {
            Button("Go to View B") {
                router.navigateTo(.viewB("Got here from C"))
            }
            Button("Go back") {
                router.navigateBack()
            }
        }
        .navigationTitle("View C")
    }
}


마지막으로 실제로 라우터 패턴을 사용하기 위해 루트 뷰를 RouterView 로 래핑합니다 .

struct ContentView: View {
    var body: some View {
        RouterView {
            ViewA()
        }
    }
}

마지막 생각들

이 게시물은 단지 높은 수준에서 라우터의 개념을 소개하고 이를 사용하는 이유와 방법에 대한 아이디어를 제공하기 위한 것입니다. 라우터는 시트, 전체 화면 프레젠테이션 및 모달 사용과 같은 탐색 스택 외에도 다른 유형의 탐색을 지원하도록 일반화될 수 있습니다. 현재 사용 가능한 다음 게시물에서 이에 대해 살펴보겠습니다. SwiftUI 탐색을 위한 라우터 패턴: 시트 및 전체 화면 표지 .
